I was recently tasked by a client to create another ‘one of those application-like websites — the ones that don’t load 😂’; it’s actually called a SPA (Single Page Application). My forte being back-end development with PHP(Laravel), I knew I could use laravel’s buddy Vue.js which is totally perfect for the job; my problem with that was that I was already quite bored with Vue, so I decided to explore with React.js — NB:: It was my only project at the time and I had only picked up React about 2 weeks prior to the time.
By reading this article, I understand you already know what both are so there’s no need to lengthen this already long but very interesting article by doing the ‘My name is Peter Parker’ thingy. We will be creating home, 404, login, registration and dashboard page in this article.
We will be using:
1. PHP — Laravel (a framework); we will be using it’s REST API
2. Passport OAuth (a Laravel package for full OAuth2 server implementation)
3. JavaScript — React (a package)
4. MySQL database
5. Visual Studio Code; it used to be PhpStorm 😩 (I’ll write on the transition later)
Back-end
On second thought, please refer to https://medium.com/modulr/create-api-authentication-with-passport-of-laravel-5-6-1dc2d400a7f on how to build an authentication system with Laravel API and Passport OAuth — Part 1 is actually enough for what we need.
We wouldn’t be needing much of Laravel’s routing as React comes with a quite awesome routing system, so add this in your routes\web.php,
Route::view('/{path?}', 'index');
The above code redirects all first level url paths in the browser to index view, this implies that paths like localhost:8080/test or localhost:8080/error will redirect us to the index view while higher orders like localhost:8080/test/error or localhost:8080/test/error/sad will return Laravel’s default 404 page — NB:: The above urls can also be routed to a controller to return views but then that wouldn’t be the point of a SPA 🤷‍ .
Next up, due to the fact that Vue wouldn’t be glad we’re making use of React instead; run the following in the terminal for your project very carefully 😄:
php artisan preset react
This actually replaces the default Vue scaffolding with React. If you check resources/assets/js/components folder, you should see an Example.js file (which we would rather refactor to Index.js instead) which is a react component.
Since it is the same server/domain that is used for both the front-end and back-end, we wouldn’t necessarily be needing Cross-origin resource sharing (CORS) or those sorts of things.
Front-end
We can now install all node modules — a galaxy of javascript packages and dependencies running the command:
npm install
Then to listen for file changes, we run the following in our terminal;
npm run watch
Next, we will remove everything within the <body></body> of our resources\views\index.blade.php and replace with the following:
<div id="index"></div>
<script src="{{ asset('js/app.js') }}"></script>
This as you might already know renders our index view with react components. A somewhat important aspect of this setup I had to ponder on was setting up my views and component folders. My file structure placed in resources\js is presented below — you could always create or research a better one though;
📂resources\js
  📂components
      // Takes in all the reusable components
      📂Footer
          Footer.js
      📂Header
          Header.js
      📂Home
          Home.js
  📂views
      📂NotFound
          NotFound.js
      📂Login
          Login.js
          LoginContainer.js
      📂Register
          Register.js
          RegisterContainer.js
      📂user
          📂Dashboard
              Dashboard.js
  app.js
  bootstrap.js
  Index.js
  PrivateRoute.js
  Router.js
app.js
require('./bootstrap');
require('./Index');
Here we just reference the Index as the component to be used which we will create below
Index.js
import React, {Component} from 'react';
import ReactDOM from 'react-dom';
import {BrowserRouter, Link, Route, Switch} from 'react-router-dom';
import Main from './Router';
class Index extends Component {
  render() {
    return (
      <BrowserRouter>
        <Route component={Main} />
      </BrowserRouter>
    );
  }
}
ReactDOM.render(<Index/>, document.getElementById('index'));
I expect you have a basic idea about routing in React so I’ll pass. If you don’t understand 🤔, which is totally not an evil thing and you want to; check out this article https://medium.com/the-andela-way/understanding-the-fundamentals-of-routing-in-react-b29f806b157e, if you don’t want to understand — that makes it totally evil 👿
Bootstrap.js
window._ = require('lodash');
try {
  window.Popper = require('popper.js').default;
  window.$ = window.jQuery = require('jquery');

  require('bootstrap');
} catch (e) {}
// The axios part I might talk about
window.axios = require('axios');
window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';
let token = document.head.querySelector('meta[name="csrf-token"]');
if (token) {
  window.axios.defaults.headers.common['X-CSRF-TOKEN'] = token.content;
  } else {
  console.error('CSRF token not found: https://laravel.com/docs/csrf#csrf-x-csrf-token');
}
Yeah, this or more…lol…what we are doing here doesn’t really need explanation but I’ll explain the axios part: we need the axios package to make POST/GET/PUT/PATCH etc requests to or from our laravel API, and Laravel is very keen on it’s CSRF-TOKEN for every server request to protect your web app from malicious individuals like myself 😈 check: https://laravel.com/docs/5.8/csrf, so we are basically sending the values of CSRF-TOKEN defined in the <head></head> of our app.blade.php with every axios request.
We’ll touch the PrivateRoute.js guy when the time comes but we need to install react-router-dom which provides the quite awesome routing system for React we talked about at the beginning of this article by running the command below in your terminal
npm i react-router-dom
Router.js
import React from 'react';
import {BrowserRouter, Link, Route, Switch} from 'react-router-dom';
import Home from './components/Home/Home';
import Login from './views/Login/Login';
import Register from './views/Register/Register';
import NotFound from './views/NotFound/NotFound'
// User is LoggedIn
import PrivateRoute from './PrivateRoute'
import Dashboard from './views/user/Dashboard/Dashboard';
const Main = props => (
<Switch>
  {/*User might LogIn*/}
  <Route exact path='/' component={Home}/>
  {/*User will LogIn*/}
  <Route path='/login' component={Login}/>
  <Route path='/register' component={Register}/>
  {/* User is LoggedIn*/}
  <PrivateRoute path='/dashboard' component={Dashboard}/>
  {/*Page Not Found*/}
  <Route component={NotFound}/>
</Switch>
);
export default Main;
Header.js
import React, {Component} from ‘react’
import {Link, withRouter} from 'react-router-dom';
class Header extends Component {
  // 1.1
  constructor(props) {
    super(props);
      this.state = {
        user: props.userData,
        isLoggedIn: props.userIsLoggedIn
      };
      this.logOut = this.logOut.bind(this);
  }
  // 1.2
  logOut() {
    let appState = {
      isLoggedIn: false,
      user: {}
    };
    localStorage["appState"] = JSON.stringify(appState);
    this.setState(appState);
    this.props.history.push('/login');
  }
  // 1.3
  render() {
    const aStyle = {
      cursor: 'pointer'
    };

    return (
<nav className="navbar">
        <ul>
          <li><Link to="/">Index</Link></li>
          {this.state.isLoggedIn ?
           <li className="has-sub"><Link to="/dashboard">Dashboard</Link></li> : ""}
          {!this.state.isLoggedIn ?
            <li><Link to="/login">Login</Link> | <Link to="/register">Register</Link></li> : ""}
        </ul>
      </nav>
    )
  }
}
export default withRouter(Header)
I am sorry if my poorly commented code bothers you 😔, I’ll rather expatiate on the code instead — it doesn’t make the article unnecessarily complex; or does it? Well here goes;
1.1. In the constructor, we create state user and isLoggedIn which derive data from a parent component or view (using props) — I guess you should already know all of this.
1.2. We create a logout method to clear the data in localStorage we called appState (which would be created after successful user login or registration); localStorage? The answers here kinda do justice to that question: https://stackoverflow.com/questions/19867599/what-is-the-difference-between-localstorage-sessionstorage-session-and-cookies
1.3. This is rather self explanatory if you’ve done the right thing 😏
Footer.js
import React from 'react';
const Footer = () => {
  return (
    <footer>
      Whatever normally goes into the footer
    </footer>
  )
};
export default Footer
Home.js
import React, {Component} from 'react'
import Header from '../Header/Header';
import Footer from '../Footer/Footer';
class Home extends Component {
  constructor() {
    super();
    this.state = {
      isLoggedIn: false,
      user: {}
    }
  }
  // check if user is authenticated and storing authentication data as states if true
  UNSAFE_componentWillMount() {
    let state = localStorage["appState"];
    if (state) {
      let AppState = JSON.parse(state);
      this.setState({ isLoggedIn: AppState.isLoggedIn, user: AppState.user });
    }
  }
render() {
    return (
      <div>
        <Header userData={this.state.user} userIsLoggedIn={this.state.isLoggedIn}/>
          <span>Whatever normally goes into the home/index page; A Plea To Heal The World for instance</span>
        <Footer/>
      </div>
      )
    }
  }
export default Home
You could as well create the 404 page/NotFound yourself 😑
RegisterContainer.js
import React, {Component} from 'react';
import {Link, withRouter} from 'react-router-dom';
import ReactDOM from 'react-dom';
import FlashMessage from 'react-flash-message';
class RegisterContainer extends Component {
  // 2.1
  constructor(props) {
    super(props);
    this.state = {
      isRegistered: false,
      error: '',
      errorMessage: '',
      formSubmitting: false,
      user: {
        name: '',
        email: '',
        password: '',
        password_confirmation: '',
    },
    redirect: props.redirect,
};
this.handleSubmit = this.handleSubmit.bind(this);
this.handleName = this.handleName.bind(this);
this.handleEmail = this.handleEmail.bind(this);
this.handlePassword = this.handlePassword.bind(this);
this.handlePasswordConfirm = this.handlePasswordConfirm.bind(this);
}
// 2.2
// componentWillMount, componentDidMount etc etc that have //componentStuffStuff are known as React Lifecycles which of course //you already know
UNSAFE_componentWillMount() {
  let state = localStorage["appState"];
  if (state) {
    let AppState = JSON.parse(state);
    this.setState({isLoggedIn: AppState.isLoggedIn, user: AppState});
  }
  if (this.state.isRegistered) {
    return this.props.history.push("/dashboard");
  }
}
// 2.3
componentDidMount() {
  const { prevLocation } = this.state.redirect.state || {prevLocation: { pathname: '/dashboard' } };
  if (prevLocation && this.state.isLoggedIn) {
    return this.props.history.push(prevLocation);
  }
}
// 2.4
handleSubmit(e) {
  e.preventDefault();
  this.setState({formSubmitting: true});
  ReactDOM.findDOMNode(this).scrollIntoView();
  let userData = this.state.user;
  axios.post("/api/auth/signup", userData)
    .then(response => {
      return response;
  }).then(json => {
      if (json.data.success) {
        let userData = {
          id: json.data.id,
          name: json.data.name,
          email: json.data.email,
          activation_token: json.data.activation_token,
        };
        let appState = {
          isRegistered: true,
          user: userData
        };
        localStorage["appState"] = JSON.stringify(appState);
        this.setState({
          isRegistered: appState.isRegistered,
          user: appState.user
        });
      } else {
          alert(`Our System Failed To Register Your Account!`);
      }
 }).catch(error => {if (error.response) {
      // The request was made and the server responded with a status code that falls out of the range of 2xx
      let err = error.response.data;
      this.setState({
        error: err.message,
        errorMessage: err.errors,
        formSubmitting: false
      })
    }
    else if (error.request) {
      // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js
      let err = error.request;
      this.setState({
        error: err,
        formSubmitting: false
      })
   } else {
       // Something happened in setting up the request that triggered an Error
       let err = error.message;
       this.setState({
         error: err,
         formSubmitting: false
       })
   }
 }).finally(this.setState({error: ''}));
}
handleName(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, first_name: value
    }
  }));
}
// 2.5
handleEmail(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, email: value
    }
  }));
}
handlePassword(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, password: value
    }
  }));
}
handlePasswordConfirm(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, password_confirmation: value
    }
  }));
}
render() {
  // 2.6
  let errorMessage = this.state.errorMessage;
  let arr = [];
  Object.values(errorMessage).forEach((value) => (
    arr.push(value)
  ));
  return (
    <div className="container">
      <div className="row">
        <div className="offset-xl-3 col-xl-6 offset-lg-1 col-lg-10 col-md-12 col-sm-12 col-12 ">
          <h2>Create Your Account</h2>
         // 2.7
        {this.state.isRegistered ? <FlashMessage duration={60000} persistOnHover={true}>
          <h5 className={"alert alert-success"}>Registration successful, redirecting...</h5></FlashMessage> : ''}
        {this.state.error ? <FlashMessage duration={900000} persistOnHover={true}>
          <h5 className={"alert alert-danger"}>Error: {this.state.error}</h5>
          <ul>
            {arr.map((item, i) => (
              <li key={i}><h5 style={{color: 'red'}}>{item}</h5></li>
             ))}
          </ul></FlashMessage> : ''}
          <form onSubmit={this.handleSubmit}>
            <div className="form-group">
              <input id="name" type="text" placeholder="Name" className="form-control" required onChange={this.handleName}/>
            </div>
            <div className="form-group">
              <input id="email" type="email" name="email" placeholder="E-mail" className="form-control" required onChange={this.handleEmail}/>
            </div>
            <div className="form-group">
              <input id="password" type="password" name="password" placeholder="Password" className="form-control" required onChange={this.handlePassword}/>
            </div>
            <div className="form-group">
              <input id="password_confirm" type="password" name="password_confirm" placeholder="Confirm Password" className="form-control" required onChange={this.handlePasswordConfirm} />
            </div>
            <button type="submit" name="singlebutton" className="btn btn-default btn-lg  btn-block mb10" disabled={this.state.formSubmitting ? "disabled" : ""}>Create Account</button>
          </form>
          <p className="text-white">Already have an account?
            <Link to="/login" className="text-yellow"> Log In</Link>
            <span className="pull-right"><Link to="/" className="text-white">Back to Home</Link></span>
        </p>
        </div>
      </div>
    </div>
    )
  }
}
// 2.8
export default withRouter(RegisterContainer);
I hope you’re not bored at this moment, have a warm cup of coffee or choco to calm down, if you’re not already oversaturated. The RegisterContainerin this instance does all the logic of registering new users into our application. I won’t be explaining React lifecycles in this article as I assume you know that already
2.1. I will talk more about the redirect when we explain Register.js (but you should know that we are getting the data of props.redirect from the parent i.e Register.js) or just research a lil here https://github.com/ReactTraining/history#navigation
2.2. Two actions are performed here: the first is to check if a localStorage called appState has been created either during registration or login processes and set those states with the values thereof, the second is to redirect the user to dashboard if he has been registered already.
2.3. Well I guess I’ll touch a lil on redirect now; React nicely provides us with a way to navigate through history (more like back to where we came from), so for instance an unauthenticated user who visits profile and is directed to login or register should be automatically redirected back to profile on authentication — and not to dashboard or any other page. This is not necessary for our 3/4 views web app but it’s quite something cool to take note of.
Here we try to get the redirect to the previous location and if that is empty, return to the dashboard instead.
2.4. scrollIntoView takes the user back to the top of the submitting form; axios.post does it’s job — sends the user data to our backend API and then create a localStorage called appState which stores the data. The rest handles errors.
2.5. This explains the handleName, handleEmail, handlePassword and handlePasswordConfirm; they are called whenever the user enters values into the respective inputs which call them.
2.6. errorMessage takes the laravel validation error object (which are defined when of course there is a validation error; same with this.state.error) if any exists and pushes them to a defined array arr to enable us display them to the user in 2.7
2.7. I forgot to add, FlashMessage is a another package used to unmount a component after a given delay which you can install by running
yarn add react-flash-message
// or
npm i react-flash-message
Check out the documentation at https://www.npmjs.com/package/react-flash-message for more info.
2.8. You shouldn’t have issues identifying withRouter if you have played your part, anyway it allows this.props.history to be accessible byRegisterContainer
Register.js
import React, {Component} from 'react';
import RegisterContainer from './RegisterContainer';
class Register extends Component {
  constructor(props) {
    super(props);
    this.state = {
      redirect: props.location,
    }
  }
  render() {
    return (
      <div className="content">
        <RegisterContainer redirect={this.state.redirect} />
      </div>
    )
  }
}
export default Register
We can access location data including history and a bunch of other data in react from props. We then pass this data from the dummy Register to the RegisterContainer check 2.1 and 2.3
LoginContainer
import React, {Component} from 'react';
import {Link, Redirect, withRouter} from 'react-router-dom';
import FlashMessage from 'react-flash-message';
class LoginContainer extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isLoggedIn: false,
      error: '',
      formSubmitting: false,
      user: {
        email: '',
        password: '',
      },
      redirect: props.redirect,
    };
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleEmail = this.handleEmail.bind(this);
    this.handlePassword = this.handlePassword.bind(this);
  }
  UNSAFE_componentWillMount() {
    let state = localStorage["appState"];
    if (state) {
      let AppState = JSON.parse(state);
      this.setState({isLoggedIn: AppState.isLoggedIn, user: AppState});
    }
  }
  componentDidMount() {
    const { prevLocation } = this.state.redirect.state || { prevLocation: { pathname: '/dashboard' } };
    if (prevLocation && this.state.isLoggedIn) {
      return this.props.history.push(prevLocation);
    }
  }
  handleSubmit(e) {
    e.preventDefault();
    this.setState({formSubmitting: true});
    let userData = this.state.user;
    axios.post("/api/auth/login", userData).then(response => {
      return response;
    }).then(json => {
         if (json.data.success) {
           let userData = {
             id: json.data.id,
             name: json.data.name,
             email: json.data.email,
             access_token: json.data.access_token,
           };
           let appState = {
             isLoggedIn: true,
             user: userData
           };
           localStorage["appState"] = JSON.stringify(appState);
           this.setState({
              isLoggedIn: appState.isLoggedIn,
              user: appState.user,
              error: ''
           });
           location.reload()
         }
         else {
            alert(`Our System Failed To Register Your Account!`);
         }
    }).catch(error => {if (error.response) {
        // The request was made and the server responded with a status code that falls out of the range of 2xx
        let err = error.response.data;
        this.setState({
          error: err.message,
          errorMessage: err.errors,
          formSubmitting: false
        })
      }
      else if (error.request) {
        // The request was made but no response was received `error.request` is an instance of XMLHttpRequest in the browser and an instance of http.ClientRequest in node.js
        let err = error.request;
        this.setState({
          error: err,
          formSubmitting: false
        })
     } else {
       // Something happened in setting up the request that triggered an Error
       let err = error.message;
       this.setState({
         error: err,
         formSubmitting: false
       })
   }
 }).finally(this.setState({error: ''}));
}
handleEmail(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, email: value
    }
  }));
}
handlePassword(e) {
  let value = e.target.value;
  this.setState(prevState => ({
    user: {
      ...prevState.user, password: value
    }
  }));
}
render() {
  const { state = {} } = this.state.redirect;
  const { error } = state;
  return (
    <div className="container">
      <div className="row">
        <div className="offset-xl-3 col-xl-6 offset-lg-1 col-lg-10 col-md-12 col-sm-12 col-12 ">
          <h2 className="text-center mb30">Log In To Your Account</h2>
          {this.state.isLoggedIn ? <FlashMessage duration={60000} persistOnHover={true}>
          <h5 className={"alert alert-success"}>Login successful, redirecting...</h5></FlashMessage> : ''}
          {this.state.error ? <FlashMessage duration={100000} persistOnHover={true}>
          <h5 className={"alert alert-danger"}>Error: {this.state.error}</h5></FlashMessage> : ''}
          {error && !this.state.isLoggedIn ? <FlashMessage duration={100000} persistOnHover={true}>
          <h5 className={"alert alert-danger"}>Error: {error}</h5></FlashMessage> : ''}
          <form onSubmit={this.handleSubmit}>
            <div className="form-group">
              <input id="email" type="email" name="email" placeholder="E-mail" className="form-control" required onChange={this.handleEmail}/>
            </div>
            <div className="form-group">
              <input id="password" type="password" name="password" placeholder="Password" className="form-control" required onChange={this.handlePassword}/>
            </div>
           <button disabled={this.state.formSubmitting} type="submit" name="singlebutton" className="btn btn-default btn-lg  btn-block mb10"> {this.state.formSubmitting ? "Logging You In..." : "Log In"} </button>
           </form>
        </div>
        <p className="text-white">Don't have an account? <Link to="/register" className="text-yellow"> Register</Link>
          <span className="pull-right">
            <Link to="/" className="text-white">Back to Index</Link>
          </span>
        </p>
      </div>
    </div>
    )
  }
}
export default withRouter(LoginContainer);
If you were able to successfully understand RegisterContainer you should easily get a grasp of this.
Login.js
import React, {Component} from 'react';
import LoginContainer from './LoginContainer';
import {withRouter} from "react-router-dom";
class Login extends Component {
  constructor(props) {
    super(props);
    this.state = {
      redirect: props.location,
    };
  }
  render() {
    return (
      <div className="content">
        <LoginContainer redirect={this.state.redirect} />
      </div>
    )
  }
}
export default withRouter(Login)
PrivateRoute.js
import React from 'react';
import {Redirect, Route, withRouter} from 'react-router-dom';
// 3.1
let state_of_state = localStorage["appState"];
if (!state_of_state){
  let appState = {
    isLoggedIn: false,
    user: {}
  };
  localStorage["appState"] = JSON.stringify(appState);
}
let state = localStorage["appState"];
let AppState = JSON.parse(state);
// 3.2
const Auth = {
  isLoggedIn: AppState.isLoggedIn,
  user: AppState
};
// 3.3
const PrivateRoute = ({ component: Component, path, ...rest }) => (
<Route path={path}
       {...rest}
       render={props => Auth.isLoggedIn ? (
       <Component {...props} />) : (<Redirect to={{
       pathname: "/login",
       state: {
         prevLocation: path,
         error: "You need to login first!",
       },
      }}
      />
    )
  }
/>);
export default withRouter(PrivateRoute);
3.1. We need to make sure a localStorage[“appState”] exists to prevent a JSON.stringify parse error. if it doesn’t, we create empty data into it else we define the data as store and parse it into AppState
3.2. This confirms if the user is authenticated by checking the value of the data in the defined AppState in 3.1
3.3. This renders the component passed to the PrivateRoute in the Router if the user is authenticated or redirects to the Login with history data.
Dashboard.js
import React, {Component} from 'react'
import Header from '../../../components/Header/Header';
import Footer from '../../../components/Footer/Footer';
class Home extends Component {
  constructor() {
    super();
    this.state = {
      isLoggedIn: false,
      user: {}
    }
  }
// check if user is authenticated and storing authentication data as states if true
  UNSAFE_componentWillMount() {
    let state = localStorage["appState"];
    if (state) {
      let AppState = JSON.parse(state);
      this.setState({ isLoggedIn: AppState.isLoggedIn, user: AppState.user });
    }
  }
// 4.1
render() {
    return (
      <div>
        <Header userData={this.state.user} userIsLoggedIn={this.state.isLoggedIn}/>
          <span>Whatever normally goes into the user dasboard page; the table below for instance</span> <br/>
          <table className="table table-striped">
            <tbody>
              <tr>
                <th scope="row ">User Id</th>
                <td>{this.user.id}</td>
              </tr>
              <tr>
                <th scope="row ">Full Name</th>
                <td>{this.user.name}</td>
              </tr>
              <tr>
                <th scope="row ">Email</th>
                <td>{this.user.email}</td>
              </tr>
            </tbody>
          </table>
        <Footer/>
      </div>
      )
    }
  }
export default Home
Either one of the pages between Dashboard and Home was totally unnecessary due to the fact that both perform similar actions and totally make use of the same components and a simple authentication check could differentiate their respective actions and merge the two pages as one. The only reason for the duplication is to explain some concepts I forgot to add as I explain whatever the table up there is doing.
4.1. In this render method, we create a simple table to display all the basic information of the authenticated user which are stored (during authentication) and then derived from localStorage[“appState”]
A small confession: I snatched bits of the code here from the project I created (lazy/busy) and just edited away the unnecessary ones right here — so watch out for bugs and mistakes…looking back at the API tutorial URL I gave, I realized that the data returned from the Login and Registration APIs would definitely not go well with this tutorial; so here are a few workarounds to that:
AuthController
<?php
namespace App\Http\Controllers;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Carbon\Carbon;
use App\User;
class AuthController extends Controller
{
    /**
     * Create user
     *
     * ...
     */
    public function signup(Request $request)
    {
        ...

        return response()->json([
            'success' => true,
            'id' => $user->id,
            'name' => $user->first_name,
            'email' => $user->email,
        ], 201);
    }

    /**
     * Login user and create token
     *
     * ...
     */
    public function login(Request $request)
    {
        ...
        return response()->json([
            'success' => true,
            'id' => $user->id,
            'name' => $user->first_name,
            'email' => $user->email,
            'access_token' => $tokenResult->accessToken,
            'token_type' => 'Bearer',
            'expires_at' => Carbon::parse(
                $tokenResult->token->expires_at
            )->toDateTimeString()
        ]);
    }

    ...
}
Conclusion
I’ll wrap up here by saying this; Vue.js is just good enough for any SPA you want to create with Laravel — I’m just kind of an explorer and I guess exploration brought you here too.
This is just a skeletal structure for user authentication using React.js and Laravel; you can always add or subtract from it. 👌
If you find any bugs or lags or errors in any code snip above, feel free to comment or contact me.
Repository: Github
Thank you very much for following till the very end, if you enjoyed this article in any way, clap for it. If you like me too, you can find me on twitter — I actually don’t do much
